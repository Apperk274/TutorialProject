@using EntityLayer.Concrete;
@using DTOLayer.ResDTO;
@model ThreadResDto;

@{
    if (Model != null)
    {
        ViewData["Title"] = Model.Thread.Title;
        <article>
            <h2>@Model.Thread.Title</h2>
            <p class="lead" style="white-space: pre-line">@Model.Thread.Content</p>
            <div class="h5 text-muted"> @Model.Thread.CreatedAt.ToString("F")</div>
        </article>
        <span>Yorumlar (@Model.NumOfComments)</span>
        <i id="showCommentsButton" style="cursor: pointer" onclick="showComments()" class="bi bi-caret-down-square"></i>
        <ul id="commentsContainer">
            <!-- Comments -->
        </ul>
    }
    else
    {
        <article>
            <div class="col-md-12">
                <h2>Thread Not Found</h2>
            </div>
        </article>
    }
}

<script defer type="text/javascript">
    let elShowCommentsButton
    let elCommentsContainer
    let templateComment

    function showComments() {
        hideEl(elShowCommentsButton)
        $.ajax({
            type: "GET",
            url: "@Url.Action("Comments")/@Model.Thread.Id",
            dataType: "json",
            success: function (comments) {
                for (comment of comments) {
                    const commentEl = templateComment.content.cloneNode(true)
                    commentEl.querySelector("li").innerText = comment.title
                    elCommentsContainer.appendChild(commentEl)
                }
                switchCaretIcon()
                elShowCommentsButton.setAttribute("onclick", "hideComments()")
            },
            error: function (req, status, error) {
                console.log(msg);
            },
            complete: function () {
                showEl(elShowCommentsButton)
            }
        });
    }

    function hideComments() {
        elCommentsContainer.innerHTML = ""
        elShowCommentsButton.setAttribute("onclick", "showComments()")
        switchCaretIcon()
    }

    // Util Functions

    function switchCaretIcon() {
        const classUp = "bi-caret-up-square"
        const classDown = "bi-caret-down-square"
        if (elShowCommentsButton.classList.contains(classDown)) {
            elShowCommentsButton.classList.remove(classDown)
            elShowCommentsButton.classList.add(classUp)
        }
        else {
            elShowCommentsButton.classList.remove(classUp)
            elShowCommentsButton.classList.add(classDown)
        }
    }

    function showEl(el) {
        el.classList.remove("d-none")
    }
    function hideEl(el) {
        el.classList.add("d-none")
    }

    // Referencing elements

    window.onload = function () {
        elShowCommentsButton = document.querySelector("#showCommentsButton")
        templateComment = document.querySelector("template#comment")
        elCommentsContainer = document.querySelector("#commentsContainer")
    }
</script>

<template id="comment">
    <li></li>
</template>